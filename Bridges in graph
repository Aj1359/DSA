#include <iostream>
#include <list>
#include <unordered_map>
#include <vector>
using namespace std;

class Graph {
private:
    int n;  // Number of nodes
    unordered_map<int, list<int>> adj;  // Adjacency list
    vector<int> disc;  
    vector<int> low;   
    vector<vector<int>> result;  
    int timer;


    void dfs(int node, int parent, unordered_map<int, bool> &visited) {
        visited[node] = true;
        disc[node] = low[node] = timer++; 
        for (auto nbr : adj[node]) {
            if (nbr == parent) {
                continue;  
            }

            if (!visited[nbr]) {
    
                dfs(nbr, node, visited);

                /
                low[node] = min(low[node], low[nbr]);

                if (disc[node] < low[nbr]) {
                    result.push_back({node, nbr});
                }
            } else {
                low[node] = min(low[node], disc[nbr]);
            }
        }
    }

public:
    // Constructor to initialize the graph with n nodes
    Graph(int n) {
        this->n = n;
        disc.resize(n + 1, -1);
        low.resize(n + 1, -1);
        timer = 0;
    }

    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);  
    vector<vector<int>> findBridges() {
        unordered_map<int, bool> visited;
        
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                dfs(i, -1, visited);
            }
        }

        return result; 
    }
};

int main() {
    int n, m;
    cout << "Enter number of nodes and edges: ";
    cin >> n >> m;

    Graph g(n);  // Create a graph with n nodes

    cout << "Enter the edges (u, v):" << endl;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v);
    }

    // Find and output the bridges
    vector<vector<int>> bridges = g.findBridges();
    if(bridges.size()==0){
        cout<<"none";
    }else{
    cout << "Bridges in the graph:" << endl;
    for (const auto &bridge : bridges) {
        cout << bridge[0] << " -- " << bridge[1] << endl;
    }}

    return 0;
}
