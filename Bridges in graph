
#include <iostream>
#include<list>
#include<vector>
#include<unordered_map>
using namespace std;
void dfs(int node,int parent, unordered_map<int,bool> &visited,unordered_map<int,list<int>> &adj,vector<int> &disc,vector<int> &low,int &timer,vector<vector<int>> &result){
    
    visited[node]=true;
    low[node-1]=disc[node-1]=timer++;
    for(auto nbr:adj[node]){
        if(nbr==parent){
            continue;
        }
        if(!visited[nbr]){
            dfs(nbr,node,visited,adj,disc,low,timer,result);
            low[node-1]=min(low[node-1],low[nbr-1]);
            if(disc[node-1]<low[nbr-1]){
                result.push_back({node,nbr});
            }
            
        }else{
            low[node-1]=min(low[node-1],disc[nbr-1]);
        }
    }
}


int main() {
   int n=5;
   vector<pair<int,int>> edges={{1,2},{2,3},{1,3},{3,4},{1,4},{4,5}};
   unordered_map<int,list<int>> adj;
   for(int i=0;i<edges.size();i++){
       int u=edges[i].first;
       int v=edges[i].second;
       adj[u].push_back(v);
       adj[v].push_back(u);
   }
   //create data structures
   int timer=0;
   unordered_map<int,bool> visited;
   vector<int> disc(n);
   vector<int> low(n);
   for(int i=0;i<n;i++){
       disc[i]=-1;
       low[i]=-1;
   }
   vector<vector<int>> result;
   int src=1;
   int parent=-1;
   for(int i=1;i<=n;i++){
       if(!visited[i]){
           dfs(i,parent,visited,adj,disc,low,timer,result);
       }
   }
     cout << "Bridges in the graph:\n";
    for (const auto bridge : result) {
        cout << bridge[0] << " -- " << bridge[1] << endl;
    }
   
   return 0;
}
