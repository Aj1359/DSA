#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Function to perform Kahn's Algorithm for topological sort
vector<int> kahnTopologicalSort(int vertices, vector<vector<int>>& adjList) {
    vector<int> indegree(vertices, 0);
    vector<int> topoOrder;

    // Step 1: Calculate indegree of all nodes
    for (int i = 0; i < vertices; i++) {
        for (int neighbor : adjList[i]) {
            indegree[neighbor]++;
        }
    }

    // Step 2: Push all nodes with indegree 0 into a queue
    queue<int> q;
    for (int i = 0; i < vertices; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }

    // Step 3: Process nodes from the queue
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        topoOrder.push_back(node);

        // Decrease the indegree of neighboring nodes
        for (int neighbor : adjList[node]) {
            indegree[neighbor]--;
            // If indegree of a neighbor becomes 0, add it to the queue
            if (indegree[neighbor] == 0) {
                q.push(neighbor);
            }
        }
    }

    // If topoOrder doesn't contain all vertices, there's a cycle
    if (topoOrder.size() != vertices) {
        cout << "The graph has a cycle. Topological sorting is not possible." << endl;
        return {};
    }

    return topoOrder;
}

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    // Initialize adjacency list for directed graph
    vector<vector<int>> adjList(vertices);
    cout << "Enter edges (from -> to):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
    }

    // Perform Kahn's algorithm
    vector<int> result = kahnTopologicalSort(vertices, adjList);

    // Print topological order
    if (!result.empty()) {
        cout << "Topological Order: ";
        for (int node : result) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}
