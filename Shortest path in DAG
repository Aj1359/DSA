#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>
#include <stack>
#include <limits.h>
using namespace std;

class Graphs {
public:
    unordered_map<int, list<pair<int, int>>> adj;  // Adjacency list to store edges and weights

    // Function to add an edge with weight
    void addEdge(int u, int v, int weight) {
        adj[u].push_back({v, weight});
    }

    // Function to display the adjacency list
    void printAdjList() const {
        cout << "Adjacency List with Weights:" << endl;
        for (auto i : adj) {
            cout << i.first << " -> ";
            for (auto j : i.second) {
                cout << "(" << j.first << ", " << j.second << ") ";
            }
            cout << endl;
        }
    }

    // Depth First Search (DFS) for topological sorting
    void dfs(int node, unordered_map<int, bool>& visited, stack<int>& s) {
        visited[node] = true;
        for (auto neighbour : adj[node]) {
            if (!visited[neighbour.first]) {
                dfs(neighbour.first, visited, s);
            }
        }
        s.push(node);
    }

    // Get shortest paths from the source node
    void shortestPath(int src, stack<int>& s, vector<int>& ans) {
        ans[src] = 0; // Set the source distance to 0

        while (!s.empty()) {
            int top = s.top();
            s.pop();
            if (ans[top] != INT_MAX) { // Only process if this node has been reached
                for (auto i : adj[top]) {
                    if (ans[top] + i.second < ans[i.first]) {
                        ans[i.first] = ans[top] + i.second; // Update the distance
                    }
                }
            }
        }
    }
};

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    Graphs graph;

    cout << "Enter edges (from to weight):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph.addEdge(u, v, w);  // Use the addEdge method to add edges with weights
    }

    // Display the adjacency list
    graph.printAdjList();

    unordered_map<int, bool> visited;
    stack<int> s;

    // Perform topological sort
    for (int i = 0; i < vertices; i++) {
        if (!visited[i]) {
            graph.dfs(i, visited, s);
        }
    }

    // Display topologically sorted order
    cout << "Topological Sort: ";
    stack<int> temp = s; // Create a temporary stack to display the topological order
    while (!temp.empty()) {
        cout << temp.top() << " ";
        temp.pop();
    }
    cout << endl;

    int src, dest;
    cout << "Enter source and destination vertices for shortest path: ";
    cin >> src >> dest;

    vector<int> ans(vertices, INT_MAX);
    graph.shortestPath(src, s, ans);

    // Output the shortest distance
    if (ans[dest] == INT_MAX) {
        cout << "There is no path from vertex " << src << " to vertex " << dest << "." << endl;
    } else {
        cout << "Shortest distance from vertex " << src << " to " << dest << " is " << ans[dest] << endl;
    }

    return 0;
}
